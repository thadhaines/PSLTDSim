%%  miniWECC_validation.m
%   Thad Haines         Research
%   Program Purpose:    Validate LTD miniWECC results with PSDS

%                       Relies on udread.m and jplot.m
%                       print_f requires altmany export fig

%   History:
%   05/06/19    14:44   init

%% init
clear; format compact; clc; close all;

%% Knowns
LTDfileName = 'miniWECC_loadStep01F.mat'
PSDSfileName = 'miniWECC_loadStep.chf'

%% import LTD data
dataName = LTDfileName(1:size(LTDfileName,2)-4); % remove .mat
load(LTDfileName);
mir = eval(dataName); % set data as common name

%% import PSDS data
psds_data = udread('miniWECC_loadStep.chf',[]);
%cellfun(@disp,psds_data.Name) % display all data types collected from psds
spd_col = jfind(psds_data, 'spd');
v_col = jfind(psds_data, 'v');
pg_col = jfind(psds_data, 'pg');
pm_col = jfind(psds_data, 'pm'); % governor pm output
qg_col = jfind(psds_data, 'qg');
f_col = jfind(psds_data, 'fbu');
t = psds_data.Data(:,1); % PSDS time

%% sum and average PSDS frequency data
N = max(size(f_col)); %number of frequencies to sum
fAve = psds_data.Data(:,f_col(1));
for freq=2:max(size(f_col))
    fAve = fAve + psds_data.Data(:,f_col(freq));
end
fAve = fAve/N/60; % as PU

%% split out PSDS data corresponding to LTD points
% find index of t == 0 in PSLF data
n = 1;
while t(n) ~= 0
	n = n+1;
end
zoft = n; % location of 0 in PSLF data
% first time step from zero used for indexing
ts = t(zoft+1); 
fs = round(1/ts);

% Collect PSLF data corresponding to LTD data
for ct=0:mir.t(end)
    % find index of time at full second
    n = zoft + fs*ct;
    % pull values
    pulledtime(ct+1) = t(n);
    pulledf(ct+1) = fAve(n); % system 'mean'
end

%% Plot parameters
ppos = [18 521 1252 457];
x_lim = [mir.t(1), mir.t(end)];

%% Plot all frequency responses and LTD on top
figure('position',ppos)
axes('ColorOrder',colormap(spring)) % to make mess of lines look nicer
subplot(3,1,1)

hold on
plot(mir.t, mir.f, 'k','linewidth',1)
for freq=1:max(size(f_col))
    plot(t, psds_data.Data(:,f_col(freq))/60)
end
plot(mir.t, mir.f, 'w','linewidth',2)
plot(mir.t, mir.f, 'k','linewidth',1)
xlim(x_lim)
grid on

%% Plot Average System frequency responses
subplot(3,1,2)

%axes('ColorOrder',colormap(spring))
plot(mir.t, mir.f ,'k','linewidth',1 )
hold on
plot(t, fAve,'m:','linewidth',2)
xlim(x_lim)
grid on



%% Plot of relative difference
relDif = (mir.f - pulledf)./pulledf*100; % as a percent
subplot(3,1,3)
hold on
plot(mir.t, relDif,'k')
grid on
